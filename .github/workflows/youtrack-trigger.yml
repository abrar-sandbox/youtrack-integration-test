name: YouTrack Tag Trigger (dev-bot)
run-name: "[${{ github.event.client_payload.issueId }}] Planning"

on:
  repository_dispatch:
    types: [ youtrack-tag-dev-bot ]

env:
  GITHUB_ORG: 'abrar-sandbox'
  YOUTRACK_BASE_URL: 'https://abrar-sandbox.youtrack.cloud'

jobs:
  discover-repos:
    name: Discover Repositories
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    outputs:
      repos: ${{ steps.process.outputs.repositories }}
    steps:
      - name: Checkout Automation Repo
        uses: actions/checkout@v4

      - name: Set up OpenCode Environment
        uses: ./.github/actions/setup-opencode-env
        with:
          node-version: '22'
          youtrack-url: ${{ env.YOUTRACK_BASE_URL }}
          youtrack-token: ${{ secrets.YOUTRACK_API_TOKEN }}
          openrouter-api-key: ${{ secrets.OPENROUTER_API_KEY }}
          model: 'openai/gpt-5'
          reasoning-effort: 'medium'

      - name: Discover Repositories from Ticket
        id: process
        uses: ./.github/actions/discover-youtrack-repos
        with:
          ticket-id: ${{ github.event.client_payload.issueId }}
          ticket-title: ${{ github.event.client_payload.title }}
          ticket-description: ${{ github.event.client_payload.description }}
          github-organization: ${{ env.GITHUB_ORG }}
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: SSH into runner to Debug (guarded)
        if: ${{ github.event.client_payload.debug == true }}
        uses: owenthereal/action-upterm@v1

  aggregate-plan:
    name: Generate Plans and Create Issues
    needs: [ discover-repos ]
    if: ${{ needs.discover-repos.outputs.repos != '' && needs.discover-repos.outputs.repos != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout Automation Repo
        uses: actions/checkout@v4

      - name: Set up OpenCode Environment
        uses: ./.github/actions/setup-opencode-env
        with:
          node-version: '22'
          youtrack-url: ${{ env.YOUTRACK_BASE_URL }}
          youtrack-token: ${{ secrets.YOUTRACK_API_TOKEN }}
          openrouter-api-key: ${{ secrets.OPENROUTER_API_KEY }}
          model: 'openai/gpt-5-codex'
          reasoning-effort: 'high'

      - name: Environment Diagnostics (OpenCode, MCP, gh, docker)
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "opencode --version";
            opencode --version || true;
            echo "";
            echo "OpenCode configuration:";
            cat opencode.json || true;
            echo "";
            echo "gh --version && gh auth status";
            gh --version || true;
            gh auth status || true;
            echo "";
            echo "docker --version";
            docker --version || true;
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Clone Target Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPOS_JSON: ${{ needs.discover-repos.outputs.repos }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p repos
          echo "$REPOS_JSON" | jq -r '.[]' | while read -r R; do
            SAFE=$(echo "$R" | tr '/' '__')
            echo "Cloning $R into repos/$SAFE"
            git clone --depth 1 "https://x-access-token:${GH_PAT}@github.com/${R}.git" "repos/$SAFE"
          done

      - name: Build Cross-Repo Analysis Prompt (OpenCode will post plans as issues on Github and comment on Youtrack)
        env:
          TICKET_ID: ${{ github.event.client_payload.issueId }}
          TITLE: ${{ github.event.client_payload.title }}
          DESC: ${{ github.event.client_payload.description }}
          REPOS_JSON: ${{ needs.discover-repos.outputs.repos }}
          YOUTRACK_URL: ${{ env.YOUTRACK_BASE_URL }}
        shell: bash
        run: |
          set -euo pipefail
          cat >>"$GITHUB_ENV" <<EOF
          PROMPT<<__PROMPT__
          YouTrack Ticket:
          - ID: ${TICKET_ID}
          - Title: ${TITLE}
          - Description:
          ${DESC}

          Context:
          - Repositories are checked out under ./repos. Each repo directory is named "org__repo" (slash replaced by double underscore).
          - The GitHub CLI (gh) is available and authenticated via GH_TOKEN. The YouTrack MCP server is registered as "youtrack".
          - You MUST read actual files before proposing changes; cite concrete file paths and snippets you used. Avoid generic statements.

          Task:
          For each repository in ${REPOS_JSON} that exists under repos/:
          1) Create a GitHub issue in that repo via gh with title containing the ticket id and title and apply the "plan:pending" label (create the label first if it doesn't exist).
          2) The issue body MUST follow this template exactly and be tailored to the repo:

          ## Ticket Link
          ${YOUTRACK_URL}/issue/${TICKET_ID}

          ## Summary
          A concise paragraph summarizing the proposed implementation for THIS repo.

          ## Proposed changes (file-by-file)
          For each file to change:
          - Path: path/to/file
          - Change: what to add/modify/remove and why.
          - Include a code block with a unified diff.

          ## Acceptance criteria
          - Bullet list of verifiable outcomes tied to the ticket.

          3) After creating all issues, if there are multiple repositories, update each issue to add a "## Related Planning Issues" section at the end with links to all OTHER planning issues (not including itself). Use gh to update the issue body with this cross-reference section.

          4) After creating and cross-linking issues, post a single comment to YouTrack ticket ${TICKET_ID} using the "youtrack" MCP tool listing the created issue URLs.

          Output:
          - Print a compact JSON at the end: { "created": { "org/repo": "https://github.com/org/repo/issues/N", ... } }.

          Quality bar:
          - Do NOT output boilerplate. Reference concrete files found in each repo.
          - Provide code blocks for proposed changes. If no changes are needed in a repo, explain why with file references.

          __PROMPT__
          EOF

      - name: Persist Full Prompt Artifact
        shell: bash
        run: |
          set -euo pipefail
          printf '%s' "${PROMPT}" > repos/prompt.txt
          BYTES=$(wc -c < repos/prompt.txt | tr -d ' ')
          {
            echo "Saved full PROMPT to repos/prompt.txt (${BYTES} bytes)";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Preview Expanded Prompt
        env:
          TICKET_ID: ${{ github.event.client_payload.issueId }}
          TITLE: ${{ github.event.client_payload.title }}
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "Ticket: ${TICKET_ID} ${TITLE}";
            echo "";
            echo "Prompt preview (first 1200 chars):";
            # PROMPT is populated from \$GITHUB_ENV in the previous step
            echo "${PROMPT}" | head -c 1200;
            echo "";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Invoke OpenCode with Prompt (capture full response)
        working-directory: repos
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
          YOUTRACK_URL: ${{ env.YOUTRACK_BASE_URL }}
          YOUTRACK_API_TOKEN: ${{ secrets.YOUTRACK_API_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          RESPONSE=$(opencode -p "$PROMPT" -q)
          printf '%s' "$RESPONSE" > ./ai_response.txt
          BYTES=$(wc -c < ./ai_response.txt | tr -d ' ')
          {
            echo "OpenCode response saved to repos/ai_response.txt (${BYTES} bytes)";
            echo "";
            echo "Response preview (first 2000 chars):";
            head -c 2000 ./ai_response.txt || true;
            echo "";
          } >> "$GITHUB_STEP_SUMMARY"
          # Also echo truncated to logs for quick view
          echo "$RESPONSE" | head -c 2000

      - name: Upload Planning Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: planning-artifacts
          path: |
            repos/prompt.txt
            repos/ai_response.txt
            repos/opencode.json
          retention-days: 7

      - name: SSH into runner to Debug (guarded)
        if: ${{ github.event.client_payload.debug == true }}
        uses: owenthereal/action-upterm@v1

  no-repos:
    name: "Notify YouTrack: No Repositories Found"
    needs: [ discover-repos ]
    if: ${{ needs.discover-repos.outputs.repos == '' || needs.discover-repos.outputs.repos == '[]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Comment on YouTrack to Request Repository Mentions
        env:
          YOUTRACK_API_TOKEN: ${{ secrets.YOUTRACK_API_TOKEN }}
          YOUTRACK_BASE_URL: ${{ env.YOUTRACK_BASE_URL }}
          TICKET_ID: ${{ github.event.client_payload.issueId }}
        shell: bash
        run: |
          set -euo pipefail
          TEXT=$'No accessible repositories were identified from this ticket.\n\nPlease specify repositories explicitly in the description using the format:\n\nrepositories: repo1, repo2, repo3\n\nAfter updating the ticket, re-trigger the workflow.'
          COMMENT_PAYLOAD=$(jq -n --arg text "$TEXT" '{text: $text}')
          curl -sS -X POST \
            -H "Authorization: Bearer ${YOUTRACK_API_TOKEN}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            "${YOUTRACK_BASE_URL}/api/issues/${TICKET_ID}/comments?fields=id,text,author(login)" \
            -d "$COMMENT_PAYLOAD"
