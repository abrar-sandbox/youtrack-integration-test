name: Plan Iterate (Scoped and Replan All)
run-name: "${{ github.event.action == 'plan-feedback' && format('[{0}] Refine plan: {1}', github.event.client_payload.ticketId, github.event.client_payload.repo) || format('[{0}] Replan across repos', github.event.client_payload.ticketId) }}"

on:
  repository_dispatch:
    types: [ plan-feedback, plan-replan-all ]

env:
  YOUTRACK_BASE_URL: 'https://abrar-sandbox.youtrack.cloud'

jobs:
  scoped-iterate:
    if: ${{ github.event.action == 'plan-feedback' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    concurrency:
      group: plan-${{ github.event.client_payload.ticketId }}-${{ github.event.client_payload.repo }}
      cancel-in-progress: false
    steps:
      - name: Checkout Orchestrator Repo
        uses: actions/checkout@v4

      - name: Set up Claude Environment
        uses: ./.github/actions/setup-claude-env
        with:
          node-version: '22'
          youtrack-url: ${{ env.YOUTRACK_BASE_URL }}
          youtrack-token: ${{ secrets.YOUTRACK_API_TOKEN }}

      - name: Prepare Event Context
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          TICKET_ID="${{ github.event.client_payload.ticketId }}"
          REPO="${{ github.event.client_payload.repo }}"
          ISSUE_NUMBER="${{ github.event.client_payload.issueNumber }}"
          COMMENT_ID="${{ github.event.client_payload.commentId }}"
          COMMENT_BODY="${{ github.event.client_payload.commentBody }}"
          AUTHOR="${{ github.event.client_payload.author }}"
          SAFE_REPO=$(printf '%s' "$REPO" | tr '/' '__')
          echo "ticket_id=$TICKET_ID" >> "$GITHUB_OUTPUT"
          echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          echo "safe_repo=$SAFE_REPO" >> "$GITHUB_OUTPUT"
          echo "issue_number=$ISSUE_NUMBER" >> "$GITHUB_OUTPUT"
          echo "comment_id=$COMMENT_ID" >> "$GITHUB_OUTPUT"
          # Save comment body to a file to avoid env escaping issues
          printf '%s' "$COMMENT_BODY" > comment.txt

      - name: Clone Target Repository (Scoped)
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p repos
          git clone --depth 1 "https://x-access-token:${GH_PAT}@github.com/${{ steps.ctx.outputs.repo }}.git" "repos/${{ steps.ctx.outputs.safe_repo }}"

      - name: Build Scoped Iteration Prompt
        env:
          TICKET_ID: ${{ steps.ctx.outputs.ticket_id }}
          TARGET_REPO: ${{ steps.ctx.outputs.repo }}
          SAFE_REPO: ${{ steps.ctx.outputs.safe_repo }}
          ISSUE_NUMBER: ${{ steps.ctx.outputs.issue_number }}
        shell: bash
        run: |
          set -euo pipefail
          COMMENT_BODY=$(cat comment.txt)
          cat >>"$GITHUB_ENV" <<EOF
          PROMPT<<__PROMPT__
          YouTrack Ticket: ${TICKET_ID}

          Context:
          - The target repository is ${TARGET_REPO} cloned under ./repos/${SAFE_REPO}
          - The GitHub CLI (gh) is available and authenticated via GH_TOKEN.
          - The YouTrack MCP server is registered as "youtrack".
          - The feedback comment that triggered this iteration is:
          ---
          ${COMMENT_BODY}
          ---

          Task:
          1) Read the current issue body for issue ${ISSUE_NUMBER} in ${TARGET_REPO} via gh.
          2) Analyze actual files in ./repos/${SAFE_REPO} relevant to the requested refinements. Cite concrete file paths you read.
          3) Update the issue plan sections with precise file-by-file proposed changes (unified diffs or exact snippets).
          4) Manage labels appropriately:
             - If refinement requested, ensure "plan:changes-requested" is present and "plan:accepted" is absent.
          5) Post a YouTrack comment using the "youtrack" MCP tool with:
             - Summary: "Plan updated for ${TARGET_REPO} based on feedback"
             - Key changes made to the plan
             - Files analyzed and updated approach
             - Link to the updated planning issue
             - Capture and note the YouTrack comment URL that gets returned.

          Requirements:
          - Be specific about what changed in the plan and why.
          - Output a compact JSON at the end: {
              "updated": true,
              "repo": "${TARGET_REPO}",
              "issue": ${ISSUE_NUMBER},
              "youtrackCommentUrl": "${{ env.YOUTRACK_BASE_URL }}/issue/${TICKET_ID}#focus=Comments-X-Y"
            }

          __PROMPT__
          EOF

      - name: Preview Prompt
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "Scoped iteration for ${{ steps.ctx.outputs.repo }} issue #${{ steps.ctx.outputs.issue_number }} (ticket ${{ steps.ctx.outputs.ticket_id }})";
            echo "";
            echo "Prompt (first 1000 chars):";
            echo "${PROMPT}" | head -c 1000;
            echo "";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Invoke Claude (Scoped)
        working-directory: repos/${{ steps.ctx.outputs.safe_repo }}
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          RESPONSE=$(printf '%s' "$PROMPT" | claude --dangerously-skip-permissions)
          echo "$RESPONSE"

  replan-all:
    if: ${{ github.event.action == 'plan-replan-all' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    concurrency:
      group: plan-${{ github.event.client_payload.ticketId }}-all
      cancel-in-progress: false
    steps:
      - name: Checkout Orchestrator Repo
        uses: actions/checkout@v4

      - name: Set up Claude Environment
        uses: ./.github/actions/setup-claude-env
        with:
          node-version: '22'
          youtrack-url: ${{ env.YOUTRACK_BASE_URL }}
          youtrack-token: ${{ secrets.YOUTRACK_API_TOKEN }}

      - name: Prepare Event Context
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          TICKET_ID="${{ github.event.client_payload.ticketId }}"
          REPO="${{ github.event.client_payload.repo }}"
          ISSUE_NUMBER="${{ github.event.client_payload.issueNumber }}"
          echo "ticket_id=$TICKET_ID" >> "$GITHUB_OUTPUT"
          echo "seed_repo=$REPO" >> "$GITHUB_OUTPUT"
          echo "seed_issue=$ISSUE_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Extract discovered repos from related planning issues
        id: discover
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          OWNER_REPO="${{ steps.ctx.outputs.seed_repo }}"
          ISSUE_NUMBER="${{ steps.ctx.outputs.seed_issue }}"

          # Fetch the issue body
          BODY=$(gh issue view "$ISSUE_NUMBER" --repo "$OWNER_REPO" --json body --jq '.body')

          # Extract GitHub issue URLs from "Related Planning Issues" section
          # Pattern: https://github.com/org/repo/issues/N
          RELATED_URLS=$(printf '%s' "$BODY" | grep -Eo 'https://github\.com/[^/]+/[^/]+/issues/[0-9]+' || true)

          # Extract org/repo from URLs and add seed repo
          REPOS_JSON=$(jq -cn --arg seed "$OWNER_REPO" '[$seed]')
          if [ -n "$RELATED_URLS" ]; then
            while IFS= read -r url; do
              # Extract org/repo from https://github.com/org/repo/issues/N
              REPO=$(echo "$url" | sed -E 's|https://github\.com/([^/]+/[^/]+)/issues/.*|\1|')
              REPOS_JSON=$(echo "$REPOS_JSON" | jq --arg r "$REPO" '. + [$r] | unique')
            done <<< "$RELATED_URLS"
          fi

          echo "repos=$REPOS_JSON" >> "$GITHUB_OUTPUT"

      - name: Clone All Discovered Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPOS_JSON: ${{ steps.discover.outputs.repos }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p repos
          echo "$REPOS_JSON" | jq -r '.[]' | while read -r R; do
            SAFE=$(echo "$R" | tr '/' '__')
            echo "Cloning $R into repos/$SAFE"
            git clone --depth 1 "https://x-access-token:${GH_PAT}@github.com/${R}.git" "repos/$SAFE"
          done

      - name: Build Replan-All Prompt
        env:
          TICKET_ID: ${{ steps.ctx.outputs.ticket_id }}
          REPOS_JSON: ${{ steps.discover.outputs.repos }}
        shell: bash
        run: |
          set -euo pipefail
          cat >>"$GITHUB_ENV" <<EOF
          PROMPT<<__PROMPT__
          YouTrack Ticket: ${TICKET_ID}

          Context:
          - Repositories are checked out under ./repos with names "org__repo".
          - The set of repos to consider (JSON): ${REPOS_JSON}
          - The GitHub CLI (gh) is available and authenticated via GH_TOKEN.
          - The YouTrack MCP server is registered as "youtrack".

          Task:
          1) For each repo in ${REPOS_JSON}, open the existing planning issue for this ticket.
          2) Re-synthesize the plan across repos to ensure consistency, reading concrete files from each repo. Cite file paths.
          3) Update each issue body with precise proposed changes and keep acceptance labels intact unless contradicted by new analysis.
          4) Post a YouTrack comment using the "youtrack" MCP tool with:
             - Summary: "Plans re-synthesized across N repositories for consistency" (where N is the count of repos in the JSON array)
             - List of repositories where plans were updated
             - Key changes made for cross-repo consistency
             - Links to updated planning issues
             - Capture and note the YouTrack comment URL that gets returned.

          Output:
          - Print a compact JSON {
              "updatedRepos": ["org/repo", ...],
              "youtrackCommentUrl": "${{ env.YOUTRACK_BASE_URL }}/issue/${TICKET_ID}#focus=Comments-X-Y"
            } at the end.

          __PROMPT__
          EOF

      - name: Preview Prompt
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "Replan-all for ticket ${{ steps.ctx.outputs.ticket_id }}";
            echo "";
            echo "Prompt (first 1000 chars):";
            echo "${PROMPT}" | head -c 1000;
            echo "";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Invoke Claude (Replan All)
        working-directory: repos
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          RESPONSE=$(printf '%s' "$PROMPT" | claude --dangerously-skip-permissions)
          echo "$RESPONSE"