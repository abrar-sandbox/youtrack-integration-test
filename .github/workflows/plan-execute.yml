name: Plan Execute (Scoped and Accept All)
run-name: "${{ github.event.action == 'plan-accept' && format('[{0}] Implement accepted plan: {1}', github.event.client_payload.ticketId, github.event.client_payload.repo) || format('[{0}] Implement all plans', github.event.client_payload.ticketId) }}"

on:
  repository_dispatch:
    types: [ plan-accept, plan-accept-all ]

jobs:
  scoped-execute:
    if: ${{ github.event.action == 'plan-accept' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    concurrency:
      group: exec-${{ github.event.client_payload.ticketId }}-${{ github.event.client_payload.repo }}
      cancel-in-progress: false
    steps:
      - name: Checkout Orchestrator Repo
        uses: actions/checkout@v4

      - name: Set up Claude Environment
        uses: ./.github/actions/setup-claude-env
        with:
          node-version: '22'
          youtrack-url: 'https://abrar-sandbox.youtrack.cloud'
          youtrack-token: ${{ secrets.YOUTRACK_API_TOKEN }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "youtrack-orchestrator-bot"
          git config --global user.email "actions@users.noreply.github.com"

      - name: Prepare Event Context
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          TICKET_ID="${{ github.event.client_payload.ticketId }}"
          REPO="${{ github.event.client_payload.repo }}"
          ISSUE_NUMBER="${{ github.event.client_payload.issueNumber }}"
          SAFE_REPO=$(printf '%s' "$REPO" | tr '/' '__')
          BRANCH="${TICKET_ID}/issue#${ISSUE_NUMBER}"
          echo "ticket_id=$TICKET_ID" >> "$GITHUB_OUTPUT"
          echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          echo "safe_repo=$SAFE_REPO" >> "$GITHUB_OUTPUT"
          echo "issue_number=$ISSUE_NUMBER" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Clone Target Repository
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p repos
          git clone "https://x-access-token:${GH_PAT}@github.com/${{ steps.ctx.outputs.repo }}.git" "repos/${{ steps.ctx.outputs.safe_repo }}"

      - name: Build Execution Prompt (Scoped)
        env:
          TICKET_ID: ${{ steps.ctx.outputs.ticket_id }}
          TARGET_REPO: ${{ steps.ctx.outputs.repo }}
          SAFE_REPO: ${{ steps.ctx.outputs.safe_repo }}
          ISSUE_NUMBER: ${{ steps.ctx.outputs.issue_number }}
          BRANCH: ${{ steps.ctx.outputs.branch }}
        shell: bash
        run: |
          set -euo pipefail
          cat >>"$GITHUB_ENV" <<EOF
          PROMPT<<__PROMPT__
          YouTrack Ticket: ${TICKET_ID}

          Context:
          - Target repository: ${TARGET_REPO} cloned under ./repos/${SAFE_REPO}
          - The GitHub CLI (gh) is available and authenticated via GH_TOKEN.
          - The YouTrack MCP server is registered as "youtrack".
          - The accepted plan is in the planning issue #${ISSUE_NUMBER} for this ticket.

          Task (scoped execution):
          1) Determine the default branch of ${TARGET_REPO} (via "gh repo view --json defaultBranchRef").
          2) Create and checkout a feature branch named "${BRANCH}" from the default branch.
          3) Read the planning issue #${ISSUE_NUMBER} and parse the "Proposed changes (file-by-file)" sections.
             - You MUST read the actual files from ./repos/${SAFE_REPO} before applying changes. Cite concrete paths you read.
             - For each proposed change, apply the exact unified diff or snippet edit to the working copy.
             - Validate basic integrity (e.g., TypeScript compile hints if applicable). Keep scope minimal for the pilot.
          4) Stage and commit changes with a message referencing the ticket ID.
          5) Push the branch to origin.
          6) Open a pull request:
             - Title includes the ticket ID and a concise description.
             - Body lists changed files with brief rationale and references to the plan steps.
             - Apply label "exec:in-progress".
          7) Update the planning issue #${ISSUE_NUMBER} with a comment containing the PR link and execution summary.
          8) Post a YouTrack comment using the "youtrack" MCP tool with:
             - Brief summary: "Implementation started for ${TARGET_REPO}"
             - PR link: [direct link to the created PR]
             - Files changed: [list of key files modified]
             - Capture and note the YouTrack comment URL that gets returned.

          Output:
          - At the end, print a compact JSON like:
            {
              "openedPR": "https://github.com/org/repo/pull/123",
              "branch": "${BRANCH}",
              "repo": "${TARGET_REPO}",
              "youtrackCommentUrl": "https://abrar-sandbox.youtrack.cloud/issue/${TICKET_ID}#focus=Comments-X-Y"
            }

          Quality:
          - No boilerplate. Reference concrete file paths you actually read/changed in ./repos/${SAFE_REPO}.
          - If any proposed change is not applicable, explain briefly in the PR body and proceed with other changes.

          __PROMPT__
          EOF

      - name: Preview Prompt
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "Scoped execution for ${{ steps.ctx.outputs.repo }} issue #${{ steps.ctx.outputs.issue_number }} (ticket ${{ steps.ctx.outputs.ticket_id }})";
            echo "";
            echo "Prompt (first 1000 chars):";
            echo "${PROMPT}" | head -c 1000;
            echo "";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Invoke Claude (Scoped Execute)
        working-directory: repos/${{ steps.ctx.outputs.safe_repo }}
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          RESPONSE=$(printf '%s' "$PROMPT" | claude --dangerously-skip-permissions)
          echo "$RESPONSE"

  execute-all:
    if: ${{ github.event.action == 'plan-accept-all' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    concurrency:
      group: exec-${{ github.event.client_payload.ticketId }}-all
      cancel-in-progress: false
    steps:
      - name: Checkout Orchestrator Repo
        uses: actions/checkout@v4

      - name: Set up Claude Environment
        uses: ./.github/actions/setup-claude-env
        with:
          node-version: '22'
          youtrack-url: 'https://abrar-sandbox.youtrack.cloud'
          youtrack-token: ${{ secrets.YOUTRACK_API_TOKEN }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "youtrack-orchestrator-bot"
          git config --global user.email "actions@users.noreply.github.com"

      - name: Prepare Event Context
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          TICKET_ID="${{ github.event.client_payload.ticketId }}"
          SEED_REPO="${{ github.event.client_payload.repo }}"
          ISSUE_NUMBER="${{ github.event.client_payload.issueNumber }}"
          echo "ticket_id=$TICKET_ID" >> "$GITHUB_OUTPUT"
          echo "seed_repo=$SEED_REPO" >> "$GITHUB_OUTPUT"
          echo "seed_issue=$ISSUE_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Extract discovered repos from related planning issues
        id: discover
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          OWNER_REPO="${{ steps.ctx.outputs.seed_repo }}"
          ISSUE_NUMBER="${{ steps.ctx.outputs.seed_issue }}"

          # Fetch the issue body
          BODY=$(gh issue view "$ISSUE_NUMBER" --repo "$OWNER_REPO" --json body --jq '.body')

          # Extract GitHub issue URLs from "Related Planning Issues" section
          # Pattern: https://github.com/org/repo/issues/N
          RELATED_URLS=$(printf '%s' "$BODY" | grep -Eo 'https://github\.com/[^/]+/[^/]+/issues/[0-9]+' || true)

          # Build repo list and repo-to-issue mapping
          REPOS_JSON=$(jq -cn --arg seed "$OWNER_REPO" '[$seed]')
          REPO_ISSUE_MAP=$(jq -cn --arg seed "$OWNER_REPO" --argjson issue "$ISSUE_NUMBER" '{($seed): $issue}')

          if [ -n "$RELATED_URLS" ]; then
            while IFS= read -r url; do
              # Extract org/repo and issue number from https://github.com/org/repo/issues/N
              REPO=$(echo "$url" | sed -E 's|https://github\.com/([^/]+/[^/]+)/issues/.*|\1|')
              ISSUE=$(echo "$url" | sed -E 's|.*/issues/([0-9]+)|\1|')
              REPOS_JSON=$(echo "$REPOS_JSON" | jq -c --arg r "$REPO" '. + [$r] | unique')
              REPO_ISSUE_MAP=$(echo "$REPO_ISSUE_MAP" | jq -c --arg r "$REPO" --argjson i "$ISSUE" '.[$r] = $i')
            done <<< "$RELATED_URLS"
          fi

          echo "repos=$REPOS_JSON" >> "$GITHUB_OUTPUT"
          echo "repo_issue_map=$REPO_ISSUE_MAP" >> "$GITHUB_OUTPUT"

      - name: Clone All Discovered Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPOS_JSON: ${{ steps.discover.outputs.repos }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p repos
          echo "$REPOS_JSON" | jq -r '.[]' | while read -r R; do
            SAFE=$(echo "$R" | tr '/' '__')
            echo "Cloning $R into repos/$SAFE"
            git clone "https://x-access-token:${GH_PAT}@github.com/${R}.git" "repos/$SAFE"
          done

      - name: Build Execution Prompt (Accept All)
        env:
          TICKET_ID: ${{ steps.ctx.outputs.ticket_id }}
          REPOS_JSON: ${{ steps.discover.outputs.repos }}
          REPO_ISSUE_MAP: ${{ steps.discover.outputs.repo_issue_map }}
        shell: bash
        run: |
          set -euo pipefail
          cat >>"$GITHUB_ENV" <<EOF
          PROMPT<<__PROMPT__
          YouTrack Ticket: ${TICKET_ID}

          Context:
          - Repositories checked out under ./repos with names "org__repo".
          - The set of repos to execute (JSON): ${REPOS_JSON}
          - Repo-to-issue mapping (JSON): ${REPO_ISSUE_MAP}
          - The GitHub CLI (gh) is available and authenticated via GH_TOKEN.
          - The YouTrack MCP server is registered as "youtrack".

          Task (cross-repo execution):
          For each repo in ${REPOS_JSON}:
            1) Get the planning issue number from the repo-to-issue mapping for this repo.
            2) Determine default branch; create a feature branch "${TICKET_ID}/issue#N" where N is the planning issue number from the mapping.
            3) Parse the accepted plan sections from issue #N; read actual files; apply diffs/snippets.
            4) Commit and push branch; open PR; apply label "exec:in-progress".
            5) Update the planning issue #N with a comment containing the PR link and execution summary.

          After processing all repos:
          6) Post a single YouTrack comment using the "youtrack" MCP tool with:
             - Summary: "Implementation started across N repositories" (where N is the count of repos in the JSON array)
             - List of all created PRs with repo names
             - Brief overview of changes made
             - Capture and note the YouTrack comment URL that gets returned.

          Output:
          - Print a compact JSON: {
              "opened": { "org/repo": "https://github.com/org/repo/pull/N", ... },
              "youtrackCommentUrl": "https://abrar-sandbox.youtrack.cloud/issue/${TICKET_ID}#focus=Comments-X-Y"
            }

          Requirements:
          - Cite concrete file paths read/changed.
          - Be specific about what was implemented in each repository.

          __PROMPT__
          EOF

      - name: Preview Prompt
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "Accept-all execution for ticket ${{ steps.ctx.outputs.ticket_id }}";
            echo "";
            echo "Prompt (first 1000 chars):";
            echo "${PROMPT}" | head -c 1000;
            echo "";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Invoke Claude (Accept All)
        working-directory: repos
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          RESPONSE=$(printf '%s' "$PROMPT" | claude --dangerously-skip-permissions)
          echo "$RESPONSE"