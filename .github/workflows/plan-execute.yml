name: Plan Execute (Scoped and Accept All)

on:
  repository_dispatch:
    types: [ plan-accept, plan-accept-all ]

jobs:
  scoped-execute:
    if: ${{ github.event.action == 'plan-accept' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    concurrency:
      group: exec-${{ github.event.client_payload.ticketId }}-${{ github.event.client_payload.repo }}
      cancel-in-progress: false
    steps:
      - name: Checkout Orchestrator Repo
        uses: actions/checkout@v4

      - name: Set up Claude Environment
        uses: ./.github/actions/setup-claude-env
        with:
          node-version: '22'
          youtrack-url: 'https://abrar-sandbox.youtrack.cloud'
          youtrack-token: ${{ secrets.YOUTRACK_API_TOKEN }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "youtrack-orchestrator-bot"
          git config --global user.email "actions@users.noreply.github.com"

      - name: Prepare Event Context
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          TICKET_ID="${{ github.event.client_payload.ticketId }}"
          REPO="${{ github.event.client_payload.repo }}"
          ISSUE_NUMBER="${{ github.event.client_payload.issueNumber }}"
          SAFE_REPO=$(printf '%s' "$REPO" | tr '/' '__')
          BRANCH="youtrack/${TICKET_ID}/plan-exec"
          echo "ticket_id=$TICKET_ID" >> "$GITHUB_OUTPUT"
          echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          echo "safe_repo=$SAFE_REPO" >> "$GITHUB_OUTPUT"
          echo "issue_number=$ISSUE_NUMBER" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Clone Target Repository
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p repos
          git clone "https://x-access-token:${GH_PAT}@github.com/${{ steps.ctx.outputs.repo }}.git" "repos/${{ steps.ctx.outputs.safe_repo }}"

      - name: Build Execution Prompt (Scoped)
        env:
          TICKET_ID: ${{ steps.ctx.outputs.ticket_id }}
          TARGET_REPO: ${{ steps.ctx.outputs.repo }}
          SAFE_REPO: ${{ steps.ctx.outputs.safe_repo }}
          ISSUE_NUMBER: ${{ steps.ctx.outputs.issue_number }}
          BRANCH: ${{ steps.ctx.outputs.branch }}
        shell: bash
        run: |
          set -euo pipefail
          cat >>"$GITHUB_ENV" <<'EOF'
          PROMPT<<__PROMPT__
          YouTrack Ticket: ${TICKET_ID}

          Context:
          - Target repository: ${TARGET_REPO} cloned under ./repos/${SAFE_REPO}
          - The GitHub CLI (gh) is available and authenticated via GH_TOKEN.
          - Use a single bot-managed state comment identified by:
            <!-- bot-state:youtrack-orchestrator -->
          - The accepted plan is in the planning issue #${ISSUE_NUMBER} for this ticket.

          Task (scoped execution):
          1) Determine the default branch of ${TARGET_REPO} (via "gh repo view --json defaultBranchRef").
          2) Create and checkout a feature branch named "${BRANCH}" from the default branch.
          3) Read the planning issue #${ISSUE_NUMBER} and parse the "Proposed changes (file-by-file)" sections.
             - You MUST read the actual files from ./repos/${SAFE_REPO} before applying changes. Cite concrete paths you read.
             - For each proposed change, apply the exact unified diff or snippet edit to the working copy.
             - Validate basic integrity (e.g., TypeScript compile hints if applicable). Keep scope minimal for the pilot.
          4) Stage and commit changes with a message referencing the ticket ID.
          5) Push the branch to origin.
          6) Open a pull request:
             - Title includes the ticket ID and a concise description.
             - Body lists changed files with brief rationale and references to the plan steps.
             - Apply label "exec:in-progress".
          7) Upsert the bot-state comment in the planning issue with:
             {
               "ticketId": "${TICKET_ID}",
               "planVersion": "<preserve or increment>",
               "lastCommentId": "<preserve>",
               "discoveredRepos": "<preserve>",
               "labels": "<include exec:in-progress>",
               "updatedAt": "<ISO timestamp>",
               "execution": {
                 "branch": "${BRANCH}",
                 "prUrl": "<created PR url>",
                 "headSha": "<latest commit sha>",
                 "status": "in_progress"
               }
             }
             - Only one bot-state comment must exist; update in place if present.
          8) Post a concise YouTrack comment via the "youtrack" MCP tool with the PR link.

          Output:
          - At the end, print a compact JSON like:
            { "openedPR": "https://github.com/org/repo/pull/123", "branch": "${BRANCH}", "repo": "${TARGET_REPO}" }

          Quality:
          - No boilerplate. Reference concrete file paths you actually read/changed in ./repos/${SAFE_REPO}.
          - If any proposed change is not applicable, explain briefly in the PR body and proceed with other changes.

          __PROMPT__
          EOF

      - name: Preview Prompt
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "Scoped execution for ${{ steps.ctx.outputs.repo }} issue #${{ steps.ctx.outputs.issue_number }} (ticket ${{ steps.ctx.outputs.ticket_id }})";
            echo "";
            echo "Prompt (first 1000 chars):";
            echo "${PROMPT}" | head -c 1000;
            echo "";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Invoke Claude (Scoped Execute)
        working-directory: repos/${{ steps.ctx.outputs.safe_repo }}
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          RESPONSE=$(printf '%s' "$PROMPT" | claude --dangerously-skip-permissions)
          echo "$RESPONSE"

  execute-all:
    if: ${{ github.event.action == 'plan-accept-all' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    concurrency:
      group: exec-${{ github.event.client_payload.ticketId }}-all
      cancel-in-progress: false
    steps:
      - name: Checkout Orchestrator Repo
        uses: actions/checkout@v4

      - name: Set up Claude Environment
        uses: ./.github/actions/setup-claude-env
        with:
          node-version: '22'
          youtrack-url: 'https://abrar-sandbox.youtrack.cloud'
          youtrack-token: ${{ secrets.YOUTRACK_API_TOKEN }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "youtrack-orchestrator-bot"
          git config --global user.email "actions@users.noreply.github.com"

      - name: Prepare Event Context
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          TICKET_ID="${{ github.event.client_payload.ticketId }}"
          SEED_REPO="${{ github.event.client_payload.repo }}"
          ISSUE_NUMBER="${{ github.event.client_payload.issueNumber }}"
          echo "ticket_id=$TICKET_ID" >> "$GITHUB_OUTPUT"
          echo "seed_repo=$SEED_REPO" >> "$GITHUB_OUTPUT"
          echo "seed_issue=$ISSUE_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Extract discovered repos from bot-state
        id: discover
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          OWNER_REPO="${{ steps.ctx.outputs.seed_repo }}"
          ISSUE_NUMBER="${{ steps.ctx.outputs.seed_issue }}"
          DATA=$(gh issue view "$ISSUE_NUMBER" --repo "$OWNER_REPO" --json body,comments)
          STATE=$(printf '%s' "$DATA" | jq -r '
            (.comments[]?.body // empty) as $b |
            select($b | contains("<!-- bot-state:youtrack-orchestrator -->")) |
            ($b | capture("<!-- bot-state:youtrack-orchestrator -->\\s*(?<json>\\{[\\s\\S]*\\})") .json) ' | tail -n1 || true)
          if [ -z "$STATE" ]; then
            STATE=$(printf '%s' "$DATA" | jq -r '
              .body as $b |
              if ($b | contains("<!-- bot-state:youtrack-orchestrator -->")) then
                ($b | capture("<!-- bot-state:youtrack-orchestrator -->\\s*(?<json>\\{[\\s\\S]*\\})") .json)
              else empty end' || true)
          fi
          if [ -n "$STATE" ]; then
            REPOS_JSON=$(printf '%s' "$STATE" | jq -c '.discoveredRepos // []')
          fi
          if [ -z "${REPOS_JSON:-}" ] || [ "$REPOS_JSON" = "null" ]; then
            REPOS_JSON=$(jq -cn --arg r "${{ steps.ctx.outputs.seed_repo }}" '[ $r ]')
          fi
          echo "repos=$REPOS_JSON" >> "$GITHUB_OUTPUT"

      - name: Clone All Discovered Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPOS_JSON: ${{ steps.discover.outputs.repos }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p repos
          echo "$REPOS_JSON" | jq -r '.[]' | while read -r R; do
            SAFE=$(echo "$R" | tr '/' '__')
            echo "Cloning $R into repos/$SAFE"
            git clone "https://x-access-token:${GH_PAT}@github.com/${R}.git" "repos/$SAFE"
          done

      - name: Build Execution Prompt (Accept All)
        env:
          TICKET_ID: ${{ steps.ctx.outputs.ticket_id }}
          REPOS_JSON: ${{ steps.discover.outputs.repos }}
        shell: bash
        run: |
          set -euo pipefail
          cat >>"$GITHUB_ENV" <<'EOF'
          PROMPT<<__PROMPT__
          YouTrack Ticket: ${TICKET_ID}

          Context:
          - Repositories checked out under ./repos with names "org__repo".
          - The set of repos to execute (JSON): ${REPOS_JSON}
          - The GitHub CLI (gh) is available and authenticated via GH_TOKEN.
          - Each repo has a planning issue with a bot-state marker:
            <!-- bot-state:youtrack-orchestrator -->

          Task (cross-repo execution):
          For each repo in ${REPOS_JSON}:
            1) Resolve the planning issue for this ticket (by title marker or body link).
            2) Determine default branch; create a feature branch "youtrack/${TICKET_ID}/plan-exec".
            3) Parse the accepted plan sections; read actual files; apply diffs/snippets.
            4) Commit and push branch; open PR; apply label "exec:in-progress".
            5) Update bot-state with execution info (branch, prUrl, headSha, status).
          After all repos:
            - Print a compact JSON: { "opened": { "org/repo": "https://github.com/org/repo/pull/N", ... } }

          Requirements:
          - Cite concrete file paths read/changed.
          - Keep one bot-state comment per repo; update in place.

          __PROMPT__
          EOF

      - name: Preview Prompt
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "Accept-all execution for ticket ${{ steps.ctx.outputs.ticket_id }}";
            echo "";
            echo "Prompt (first 1000 chars):";
            echo "${PROMPT}" | head -c 1000;
            echo "";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Invoke Claude (Accept All)
        working-directory: repos
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          RESPONSE=$(printf '%s' "$PROMPT" | claude --dangerously-skip-permissions)
          echo "$RESPONSE"